{"version":3,"sources":["helpers/generateCards.js","redux/soundSlice.js","helpers/localStorage.js","redux/gameSlice.js","redux/settingsSlice.js","components/TopBar.js","components/Settings.js","components/SideBar.js","components/FlipCard.js","components/GameBoard.js","components/ControlBoard.js","components/WinnerCard.js","components/MainBar.js","sounds/start.mp3","sounds/flipOpen.mp3","sounds/flipClose.mp3","sounds/like.mp3","sounds/win.mp3","components/Sounds.js","components/HotKey.js","components/App.js","redux/store.js","Theme/theme.js","index.js"],"names":["generateCards","count","idsSet","Set","size","add","Math","floor","random","ids","Array","from","concat","array","i","length","j","shuffle","map","idImg","id","src","isOpen","soundSlice","createSlice","name","initialState","isStart","isFlipOpen","isFlipClose","isLike","isWin","isMusic","reducers","playStart","state","action","payload","playFlipOpen","playFlipClose","playLike","playWin","playMusic","actions","isPlay","sound","keySettings","keyGameData","setGameData","gameData","data","JSON","stringify","window","localStorage","setItem","gameSlice","getItem","parse","getGameData","cards","isStartGame","isShowWin","timerOpenAllId","flipCount","timeGame","timerGameId","selectedCardId","timerStartAutoId","timerAutoGameId","resetState","resetCards","openCard","closeCard","openAll","closeAll","setTimerOpenAllId","clearTimerIdAll","clearTimeout","incrementTimeGame","setTimerGameId","clearTimerGameId","clearInterval","incrementFlipCount","setSelectedCardId","setTimerStartAutoId","setTimerAutoGameId","clearTimerStartAutoId","clearTimerAutoGameId","setIsShowWin","saveState","resetGame","dispatch","getState","countCards","settings","widthBoard","heightBoard","flipCard","compareCard","playGame","setInterval","timerId","setTimeout","game","filter","card","stopGame","autoPlay","randomId","cardsGame","settingsSlice","getSettings","isShowSettings","isShowTime","isShowCount","isSounds","volumeSounds","setIsShowSettings","setSettings","toggleShowTime","toggleShowCount","setSize","setIsSounds","setVolumeSounds","setSizeBoard","isShow","sizeBoard","sounds","useStyles","makeStyles","theme","menuButton","marginRight","spacing","title","flexGrow","icon","marginLeft","TopBar","useDispatch","useSelector","countFlip","time","classes","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","onClick","Typography","variant","group","marginBottom","Settings","FormControl","component","FormLabel","FormGroup","FormControlLabel","control","Switch","checked","onChange","label","RadioGroup","value","event","target","split","width","height","Radio","Checkbox","e","gutterBottom","Grid","container","item","xs","Slider","val","disabled","min","max","step","aria-labelledby","root","padding","SideBar","Drawer","anchor","open","onClose","type","key","toggleSideBar","role","media","aspectRatio","FlipCard","handlerClick","isFlipped","flipDirection","Card","CardActionArea","CardMedia","image","GameBoard","useEffect","display","justifyContent","ControlBoard","Button","startIcon","WinnerCard","handleClose","Dialog","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","flexDirection","MainBar","Container","maxWidth","Sounds","play","useSound","startSfx","volume","soundEnabled","start","flipOpenSfx","flipOpen","flipCloseSfx","flipClose","likeSfx","like","winSfx","win","playing","html5","HotKey","useHotkeys","App","configureStore","reducer","settingsReducer","gameReducer","soundReducer","createMuiTheme","ReactDOM","render","store","CssBaseline","document","getElementById"],"mappings":"yQAOe,SAASA,EAAcC,GAEpC,IADA,IAAMC,EAAS,IAAIC,IACZD,EAAOE,KAAOH,EAAQ,GAC3BC,EAAOG,IAAIC,KAAKC,MAAsB,KAAhBD,KAAKE,WAE7B,IAAMC,EAAMC,MAAMC,KAAKT,GAAQU,OAAOF,MAAMC,KAAKT,IASjD,OArBF,SAAiBW,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIV,KAAKC,MAAMD,KAAKE,UAAYM,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,MAY3CC,CAAQR,GACMA,EAAIS,KAAI,SAACC,GAAD,MAAY,CAChCC,GAAId,KAAKE,SACTW,QAEAE,IAAI,+CAAD,OAAiDF,GACpDG,QAAQ,MCjBL,IAAMC,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAAc,CACZC,SAAS,EACTC,YAAY,EACZC,aAAa,EACbC,QAAQ,EACRC,OAAO,EACPC,SAAS,GAEXC,SAAU,CACRC,UAAW,SAACC,EAAOC,GACjBD,EAAMR,QAAUS,EAAOC,SAEzBC,aAAc,SAACH,EAAOC,GACpBD,EAAMP,WAAaQ,EAAOC,SAE5BE,cAAe,SAACJ,EAAOC,GACrBD,EAAMN,YAAcO,EAAOC,SAE7BG,SAAU,SAACL,EAAOC,GAChBD,EAAML,OAASM,EAAOC,SAExBI,QAAS,SAACN,EAAOC,GACfD,EAAMJ,MAAQK,EAAOC,SAEvBK,UAAW,SAACP,EAAOC,GACjBD,EAAMH,QAAUI,EAAOC,Y,EAYzBd,EAAWoB,QANbT,E,EAAAA,UACAI,E,EAAAA,aACAC,E,EAAAA,cACAC,E,EAAAA,SACAC,E,EAAAA,QAIWG,G,EAHXF,UAGoB,SAACP,GAAD,MAAY,CAChCR,QAASQ,EAAMU,MAAMlB,QACrBC,WAAYO,EAAMU,MAAMjB,WACxBC,YAAaM,EAAMU,MAAMhB,YACzBC,OAAQK,EAAMU,MAAMf,OACpBC,MAAOI,EAAMU,MAAMd,SAERC,EAAU,SAACG,GAAD,OAAWA,EAAMU,MAAMb,SAE/BT,IAAf,QCpDMuB,EAAc,WACdC,EAAc,YAgBPC,EAAc,SAACC,GAC1B,IAAMC,EAAOC,KAAKC,UAAUH,GAC5BI,OAAOC,aAAaC,QAAQR,EAAaG,ICR9BM,EAAYhC,YAAY,CACnCC,KAAM,OACNC,aDSyB,WACzB,IAAMwB,EAAOG,OAAOC,aAAaG,QAAQV,GACzC,OAAOI,KAAKO,MAAMR,GCXJS,IAAiB,CAC7BC,MAAO,GACPC,aAAa,EACbC,WAAW,EACXC,eAAgB,KAChBC,UAAW,EACXC,SAAU,EACVC,YAAa,KACbC,eAAgB,KAChBC,iBAAkB,KAClBC,gBAAiB,MAEnBpC,SAAU,CACRqC,WAAY,SAACnC,GACXA,EAAM0B,aAAc,EACpB1B,EAAM6B,UAAY,EAClB7B,EAAM8B,SAAW,EACjB9B,EAAMgC,eAAiB,MAEzBI,WAAY,SAACpC,EAAOC,GAClBD,EAAMyB,MAAQ5D,EAAcoC,EAAOC,SACnCF,EAAM0B,aAAc,GAEtBW,SAAU,SAACrC,EAAOC,GAChBD,EAAMyB,MAAMxB,EAAOC,QAAQjB,IAAIE,QAAS,GAE1CmD,UAAW,SAACtC,EAAOC,GACjBD,EAAMyB,MAAMxB,EAAOC,SAASf,QAAS,GAEvCoD,QAAS,SAACvC,GAAW,IAAD,gBACDA,EAAMyB,OADL,IAClB,2BAA8B,SACvBtC,QAAS,GAFE,gCAKpBqD,SAAU,SAACxC,GAAW,IAAD,gBACFA,EAAMyB,OADJ,IACnB,2BAA8B,SACvBtC,QAAS,GAFG,gCAKrBsD,kBAAmB,SAACzC,EAAOC,GACzBD,EAAM4B,eAAiB3B,EAAOC,SAEhCwC,gBAAiB,SAAC1C,GACZA,EAAM4B,gBACRe,aAAa3C,EAAM4B,gBAErB5B,EAAM4B,eAAiB,MAEzBgB,kBAAmB,SAAC5C,GAClBA,EAAM8B,UAAY,GAEpBe,eAAgB,SAAC7C,EAAOC,GACtBD,EAAM0B,aAAc,EACpB1B,EAAM+B,YAAc9B,EAAOC,SAE7B4C,iBAAkB,SAAC9C,GACjB+C,cAAc/C,EAAM+B,aACpB/B,EAAM+B,YAAc,KACpB/B,EAAM0B,aAAc,GAEtBsB,mBAAoB,SAAChD,GACnBA,EAAM6B,WAAa,GAErBoB,kBAAmB,SAACjD,EAAOC,GACzBD,EAAMgC,eAAiB/B,EAAOC,SAEhCgD,oBAAqB,SAAClD,EAAOC,GAC3BD,EAAMiC,iBAAmBhC,EAAOC,SAElCiD,mBAAoB,SAACnD,EAAOC,GAC1BD,EAAMkC,gBAAkBjC,EAAOC,SAEjCkD,sBAAuB,SAACpD,GAClBA,EAAMiC,mBACRU,aAAa3C,EAAMiC,kBACnBjC,EAAMiC,iBAAmB,OAG7BoB,qBAAsB,SAACrD,GACjBA,EAAMkC,kBACRa,cAAc/C,EAAMkC,iBACpBlC,EAAMkC,gBAAkB,OAG5BoB,aAAc,SAACtD,EAAOC,GACpBD,EAAM2B,UAAY1B,EAAOC,QACzBW,EAAYb,IAEduD,UAAW,SAACvD,GACVa,EAAYb,O,EAyBdqB,EAAUb,QAnBZ2B,E,EAAAA,WACAC,E,EAAAA,WACAC,E,EAAAA,SACAC,E,EAAAA,UACAC,E,EAAAA,QACAC,E,EAAAA,SACAC,E,EAAAA,kBACAC,E,EAAAA,gBACAE,E,EAAAA,kBACAC,E,EAAAA,eACAC,E,EAAAA,iBACAE,E,EAAAA,mBACAC,E,EAAAA,kBACAC,E,EAAAA,oBACAC,E,EAAAA,mBACAC,E,EAAAA,sBACAC,E,EAAAA,qBACAC,E,EAAAA,aACAC,G,EAAAA,UAGWC,GAAY,kBAAM,SAACC,EAAUC,GACxC,IAAM1D,EAAQ0D,IACRC,EAAa3D,EAAM4D,SAASC,WAAa7D,EAAM4D,SAASE,YAC9DL,EAASL,KACTK,EAASJ,KACTI,EAASf,KACTe,EAASX,KACTW,EAAStB,KACTsB,EAASrB,EAAWuB,IACpBF,EAASF,QAGEQ,GAAW,SAAC9E,GAAD,OAAQ,SAACwE,GAC/BA,EAAStD,GAAa,IACtBsD,EAASpB,EAAS,CAAEpD,QACpBwE,EAAST,KACTS,EAASO,GAAY/E,MAGVgF,GAAW,kBAAM,SAACR,GAC7BA,EAAS1D,GAAU,IACnB0D,EAASD,MACT,IAAMzB,EAAcmC,aAAY,kBAAMT,EAASb,OAAsB,KACrEa,EAASZ,EAAed,IACxB0B,EAASlB,KACT,IAAM4B,EAAUC,YAAW,WACzBX,EAASjB,KACTiB,EAAShB,EAAkB,SAC1B,KACHgB,EAAShB,EAAkB0B,MAGhBH,GAAc,SAAC/E,GAAD,OAAQ,SAACwE,EAAUC,GAC5C,IAAMW,EAAOX,IAAWW,KACpBA,EAAKrC,iBAAmB/C,IACA,OAAxBoF,EAAKrC,gBACHqC,EAAK5C,MAAMxC,GAAID,QAAUqF,EAAK5C,MAAM4C,EAAKrC,gBAAgBhD,OAC3DyE,EAASpD,GAAS,IACbgE,EAAK5C,MAAM6C,QAAO,SAACC,GAAD,OAAWA,EAAKpF,UAAQP,QAC7C6E,EAASe,OAGXJ,YAAW,WACTX,EAASrD,GAAc,IACvBqD,EAASnB,EAAU+B,EAAKrC,iBACxByB,EAASnB,EAAUrD,IACnBwE,EAASF,QACR,KAELE,EAASR,EAAkB,QAE3BQ,EAASR,EAAkBhE,IAE7BwE,EAASF,SAGEiB,GAAW,kBAAM,SAACf,GAC7BA,EAASX,KACTW,EAASL,KACTK,EAASJ,KACTI,EAASH,GAAa,IACtBG,EAASnD,GAAQ,IACjBmD,EAASF,QAGEkB,GAAW,kBAAM,SAAChB,EAAUC,GACvCD,EAASQ,MACT,IAAMhC,EAAmBmC,YAAW,WAClC,IAAMlC,EAAkBgC,aAAY,WAGlC,IAFA,IAAMzC,EAAQiC,IAAWW,KAAK5C,MAC1BiD,EAAW,KACK,OAAbA,IAAA,UAAqBjD,EAAMiD,UAA3B,aAAqB,EAAiBvF,SAAQ,CAAC,IAAD,EACnDuF,EAAWvG,KAAKC,MAAMD,KAAKE,SAAWoD,EAAM7C,QAE9C6E,EAASM,GAASW,MACjB,KACHjB,EAASN,EAAmBjB,MAC3B,KACHuB,EAASP,EAAoBjB,MAGlB0C,GAAY,SAAC3E,GAAD,OAAWA,EAAMqE,KAAK5C,OAClCI,GAAY,SAAC7B,GAAD,OAAWA,EAAMqE,KAAKxC,WAClCC,GAAW,SAAC9B,GAAD,OAAWA,EAAMqE,KAAKvC,UACjCH,GAAY,SAAC3B,GAAD,OAAWA,EAAMqE,KAAK1C,WAEhCN,KAAf,QCnNauD,GAAgBvF,YAAY,CACvCC,KAAM,WACNC,aFEyB,WACzB,IAAMwB,EAAOG,OAAOC,aAAaG,QAAQX,GACzC,OAAOK,KAAKO,MAAMR,GEJJ8D,IAAiB,CAC7BC,gBAAgB,EAChBC,YAAY,EACZC,aAAa,EACbnB,WAAY,EACZC,YAAa,EACbmB,UAAU,EACVC,aAAc,GAEhBpF,SAAU,CACRqF,kBAAmB,SAACnF,EAAOC,GACzBD,EAAM8E,eAAiB7E,EAAOC,QACzBD,EAAOC,SFfS,SAAC0D,GAC1B,IAAM7C,EAAOC,KAAKC,UAAU2C,GAC5B1C,OAAOC,aAAaC,QAAQT,EAAaI,GEahBqE,CAAYpF,IAEnCqF,eAAgB,SAACrF,GACfA,EAAM+E,YAAc/E,EAAM+E,YAE5BO,gBAAiB,SAACtF,GAChBA,EAAMgF,aAAehF,EAAMgF,aAE7BO,QAAS,SAACvF,EAAOC,GACfD,EAAM6D,WAAa5D,EAAOC,QAAQ2D,WAClC7D,EAAM8D,YAAc7D,EAAOC,QAAQ4D,aAErC0B,YAAa,SAACxF,EAAOC,GACnBD,EAAMiF,SAAWhF,EAAOC,SAE1BuF,gBAAiB,SAACzF,EAAOC,GACvBD,EAAMkF,aAAejF,EAAOC,Y,GAY9B0E,GAAcpE,QANhB2E,G,GAAAA,kBACAE,G,GAAAA,eACAC,G,GAAAA,gBACAC,G,GAAAA,QACAC,G,GAAAA,YACAC,G,GAAAA,gBAGWC,GAAe,SAACzH,GAAD,OAAU,SAACwF,GACrCA,EAAS8B,GAAQtH,IACjBwF,EAASD,QAGEsB,GAAiB,SAAC9E,GAAD,OAAWA,EAAM4D,SAASkB,gBAC3Ca,GAAS,SAAC3F,GAAD,MAAY,CAChC+E,WAAY/E,EAAM4D,SAASmB,WAC3BC,YAAahF,EAAM4D,SAASoB,cAEjBY,GAAY,SAAC5F,GAAD,MAAY,CACnC6D,WAAY7D,EAAM4D,SAASC,WAC3BC,YAAa9D,EAAM4D,SAASE,cAEjB+B,GAAS,SAAC7F,GAAD,MAAY,CAChCiF,SAAUjF,EAAM4D,SAASqB,SACzBC,aAAclF,EAAM4D,SAASsB,eAKhBN,MAAf,Q,QCvDMkB,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,WAAY,CACVC,YAAaF,EAAMG,QAAQ,IAE7BC,MAAO,CACLC,SAAU,GAEZC,KAAM,CACJJ,YAAaF,EAAMG,QAAQ,GAC3BI,WAAYP,EAAMG,QAAQ,QAiDfK,OA7Cf,WACE,IAAM/C,EAAWgD,cADD,EAEoBC,YAAYf,IAAxCZ,EAFQ,EAERA,WAAYC,EAFJ,EAEIA,YACd2B,EAAYD,YAAY7E,IACxB+E,EAAOF,YAAY5E,IAEnB+E,EAAUf,KAEhB,OACE,eAACgB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,gBAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEC,KAAK,QACLC,UAAWN,EAAQZ,WACnBmB,MAAM,UACNC,aAAW,OAEXC,QAAS,kBAAM7D,EAAS0B,IAAkB,KAN5C,SAQE,eAAC,IAAD,MAEF,eAACoC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWN,EAAQT,MAA5C,+BAICpB,GACC,uCACE,eAAC,IAAD,CAAcmC,UAAWN,EAAQP,OACjC,eAACiB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0Bb,OAI7B5B,GACC,uCACE,eAAC,IAAD,CAAOoC,UAAWN,EAAQP,OAC1B,gBAACiB,EAAA,EAAD,CAAYC,QAAQ,KAApB,UAA0BZ,EAA1B,mB,+JCnCNd,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyB,MAAO,CACLC,aAAc1B,EAAMG,QAAQ,QAmHjBwB,OA/Gf,WACE,IAAMlE,EAAWgD,cADC,EAEkBC,YAAYf,IAAxCZ,EAFU,EAEVA,WAAYC,EAFF,EAEEA,YAFF,EAGkB0B,YAAYd,IAAxC/B,EAHU,EAGVA,WAAYC,EAHF,EAGEA,YAHF,EAIiB4C,YAAYb,IAAvCZ,EAJU,EAIVA,SAAUC,EAJA,EAIAA,aAEZ2B,EAAUf,KAOhB,OACE,+BACE,gBAAC8B,GAAA,EAAD,CAAaC,UAAU,WAAvB,UACE,eAACC,GAAA,EAAD,CAAWD,UAAU,SAArB,wBACA,gBAACE,GAAA,EAAD,CAAWZ,UAAWN,EAAQY,MAA9B,UACE,eAACO,GAAA,EAAD,CACEC,QACE,eAACC,GAAA,EAAD,CACEC,QAASnD,EACToD,SAAU,kBAAM3E,EAAS6B,OACzBhG,KAAK,UAGT+I,MAAM,oBAER,eAACL,GAAA,EAAD,CACEC,QACE,eAACC,GAAA,EAAD,CACEC,QAASpD,EACTqD,SAAU,kBAAM3E,EAAS4B,OACzB/F,KAAK,SAGT+I,MAAM,sBAIV,eAACP,GAAA,EAAD,CAAWD,UAAU,SAArB,wBACA,eAACE,GAAA,EAAD,CAAWZ,UAAWN,EAAQY,MAA9B,SACE,gBAACa,GAAA,EAAD,CACEjB,aAAW,aAEXkB,MAAK,UAAK1E,EAAL,YAAmBC,GACxBsE,SAtCS,SAACI,GAAW,IAAD,EACJA,EAAMC,OAAOF,MAAMG,MAAM,KADrB,oBACrBC,EADqB,KACdC,EADc,KAE5BnF,EAASiC,GAAa,CAAE7B,YAAa8E,EAAO7E,aAAc8E,MAgCpD,UAME,eAACZ,GAAA,EAAD,CACEO,MAAM,MACNN,QAAS,eAACY,GAAA,EAAD,IACTR,MAAM,eAER,eAACL,GAAA,EAAD,CACEO,MAAM,MACNN,QAAS,eAACY,GAAA,EAAD,IACTR,MAAM,iBAER,eAACL,GAAA,EAAD,CACEO,MAAM,MACNN,QAAS,eAACY,GAAA,EAAD,IACTR,MAAM,oBAUZ,eAACP,GAAA,EAAD,CAAWD,UAAU,SAArB,oBACA,gBAACE,GAAA,EAAD,CAAWZ,UAAWN,EAAQY,MAA9B,UACE,eAACO,GAAA,EAAD,CACEC,QACE,eAACa,GAAA,EAAD,CACEX,QAASlD,EACTmD,SAAU,SAACW,GAAD,OAAOtF,EAAS+B,GAAYuD,EAAEN,OAAON,WAC/C7I,KAAK,WAGT+I,MAAM,eAER,eAACd,EAAA,EAAD,CAAYtI,GAAG,oBAAoB+J,cAAY,EAA/C,2BAGA,gBAACC,GAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,EAAzB,UACE,eAAC8C,GAAA,EAAD,CAAME,MAAI,EAAV,SACE,eAAC,KAAD,MAEF,eAACF,GAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,eAACC,GAAA,EAAD,CACEd,MAAOrD,EACPkD,SAAU,SAACW,EAAGO,GAAJ,OAAY7F,EAASgC,GAAgB6D,KAC/CC,UAAWtE,EACXuE,IAAK,EACLC,IAAK,EACLC,KAAM,GACNC,kBAAgB,wBAGpB,eAACV,GAAA,EAAD,CAAME,MAAI,EAAV,SACE,eAAC,KAAD,kBChIRrD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC4D,KAAM,CACJjB,MAAO,IACPkB,QAAS7D,EAAMG,QAAQ,QAmCZ2D,OA/Bf,WACE,IAAMrG,EAAWgD,cAEXtH,EAASuH,YAAY5B,IAErB+B,EAAUf,KAYhB,OACE,eAACiE,GAAA,EAAD,CAAQC,OAAO,OAAOC,KAAM9K,EAAQ+K,QAXhB,eAACD,IAAD,gEAAiB,SAACzB,IAErB,YAAfA,EAAM2B,MACS,QAAd3B,EAAM4B,KAA+B,UAAd5B,EAAM4B,MAIhC3G,EAAS0B,GAAkB8E,KAIkBI,EAAc,GAA3D,SACE,sBACElD,UAAWN,EAAQ+C,KACnBU,KAAK,eAFP,SAME,eAAC,GAAD,S,4DChCFxE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCzB,KAAM,GACNgG,MAAO,CACLC,YAAa,aA2CFC,OAvCf,YAMI,IAAD,IALDxL,UAKC,MALI,GAKJ,MAJDC,WAIC,MAJK,GAIL,MAHDC,cAGC,SAFDmI,EAEC,EAFDA,QAEC,IADDH,iBACC,MADW,GACX,EACKN,EAAUf,KAEV4E,EAAe,WACdvL,GAAQmI,EAAQrI,IAEvB,OACE,sBAAKkI,UAAWA,EAAhB,SACE,gBAAC,KAAD,CAAewD,UAAWxL,EAAQyL,cAAc,aAAhD,UACE,eAACC,GAAA,EAAD,CAAM1D,UAAWN,EAAQtC,KAAzB,SACE,eAACuG,GAAA,EAAD,CAAgBxD,QAASoD,EAAzB,SACE,eAACK,GAAA,EAAD,CACE5D,UAAWN,EAAQ0D,MACnBS,MAAM,sCACN5E,MAAM,kBAKZ,eAACyE,GAAA,EAAD,CAAM1D,UAAWN,EAAQtC,KAAzB,SACE,eAACuG,GAAA,EAAD,CAAgBxD,QAASoD,EAAzB,SACE,eAACK,GAAA,EAAD,CACE5D,UAAWN,EAAQ0D,MACnBS,MAAO9L,EACPkH,MAAM,wBCpCdN,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC4D,KAAM,CACJlC,aAAc1B,EAAMG,QAAQ,IAE9B5B,KAAM,OAqCO0G,OAlCf,WACE,IAAMxH,EAAWgD,cACT5C,EAAe6C,YAAYd,IAA3B/B,WACFpC,EAAQiF,YAAY/B,IAEpBkC,EAAUf,KAEhBoF,qBAAU,WACHzJ,EAAM7C,QAAQ6E,EAASD,QAC3B,IAEH,IAAMkH,EAAe,SAACzL,GACpBwE,EAASM,GAAS9E,KAGpB,OACE,sBAAKkI,UAAWN,EAAQ+C,KAAxB,SACE,eAACX,GAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,GAAKtC,EAAa,EAA3C,SACGpC,EAAM1C,KAAI,SAACwF,EAAMtF,GAAP,OACT,eAACgK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAKvF,EAApB,SACE,eAAC,GAAD,CACEsD,UAAWN,EAAQtC,KACnBtF,GAAIA,EACJC,IAAKqF,EAAKrF,IACVC,OAAQoF,EAAKpF,OACbmI,QAASoD,KANwBnG,EAAKtF,Y,sECzB9C6G,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC4D,KAAM,CACJuB,QAAS,OACTC,eAAgB,oBA0CLC,OAtCf,WACE,IAAM5H,EAAWgD,cAEXI,EAAUf,KAEhB,OACE,uBAAKqB,UAAWN,EAAQ+C,KAAxB,UACE,eAAC0B,GAAA,EAAD,CACE9D,QAAQ,YACRJ,MAAM,UACNmE,UAAW,eAAC,KAAD,IACXjE,QAAS,kBAAM7D,EAASD,OAJ1B,mBASA,eAAC8H,GAAA,EAAD,CACE9D,QAAQ,YACRJ,MAAM,UACNnJ,KAAK,QACLsN,UAAW,eAAC,KAAD,IACXjE,QAAS,kBAAM7D,EAASQ,OAL1B,kBAUA,eAACqH,GAAA,EAAD,CACE9D,QAAQ,YACRJ,MAAM,UACNmE,UAAW,eAAC,KAAD,IACXjE,QAAS,kBAAM7D,EAASgB,OAJ1B,sB,kDCMS+G,OAjCf,WACE,IAAM/H,EAAWgD,cACXd,EAASe,YAAY/E,IACrBiF,EAAOF,YAAY5E,IACnBhE,EAAQ4I,YAAY7E,IAEpB4J,EAAc,WAClBhI,EAASH,GAAa,KAGxB,OACE,gBAACoI,GAAA,EAAD,CACEzB,KAAMtE,EACNuE,QAASuB,EACT9B,kBAAgB,qBAChBgC,mBAAiB,2BAJnB,UAME,eAACC,GAAA,EAAD,CAAa3M,GAAG,qBAAhB,SAAsC,aACtC,eAAC4M,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,CAAmB7M,GAAG,2BAAtB,UACE,+CAAiB2H,EAAjB,UACA,gDAAkB9I,UAGtB,eAACiO,GAAA,EAAD,UACE,eAACT,GAAA,EAAD,CAAQhE,QAASmE,EAAarE,MAAM,UAAU4E,WAAS,EAAvD,sBCjCFlG,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC4D,KAAM,CACJvD,SAAU,EACV8E,QAAS,OACTc,cAAe,SACfpC,QAAS7D,EAAMG,QAAQ,QAgBZ+F,OAZf,WACE,IAAMrF,EAAUf,KAEhB,OACE,gBAACqG,GAAA,EAAD,CAAWhF,UAAWN,EAAQ+C,KAAMwC,SAAS,KAA7C,UACE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,Q,6BCvBS,OAA0B,kCCA1B,OAA0B,qCCA1B,OAA0B,sCCA1B,OAA0B,iCCA1B,OAA0B,gCC+E1BC,OA3Df,WACE,IAAM5I,EAAWgD,cACX6F,EAAO5F,YAAYjG,GAFT,GAGFiG,YAAY7G,GACS6G,YAAYb,KAAvCZ,EAJQ,EAIRA,SAAUC,EAJF,EAIEA,aAJF,EAMAqH,aAASC,GAAU,CACjCC,OAAQvH,EACRwH,aAAczH,IAFT0H,EANS,uBAUGJ,aAASK,GAAa,CACvCH,OAAQvH,EACRwH,aAAczH,IAFT4H,EAVS,uBAcIN,aAASO,GAAc,CACzCL,OAAQvH,EACRwH,aAAczH,IAFT8H,EAdS,uBAkBDR,aAASS,GAAS,CAC/BP,OAAQvH,EACRwH,aAAczH,IAFTgI,EAlBS,uBAsBFV,aAASW,GAAQ,CAC7BT,OAAQvH,EACRwH,aAAczH,IAFTkI,EAtBS,qBAkDhB,OAvBAjC,qBAAU,WACJoB,EAAK9M,UACPmN,IACAlJ,EAAS1D,GAAU,KAEjBuM,EAAK7M,aACPoN,IACApJ,EAAStD,GAAa,KAEpBmM,EAAK5M,cACPqN,IACAtJ,EAASrD,GAAc,KAErBkM,EAAK3M,SACPsN,IACAxJ,EAASpD,GAAS,KAEhBiM,EAAK1M,QACPuN,IACA1J,EAASnD,GAAQ,OAElB,CAACgM,IAGF,eAAC,KAAD,CACEpN,IAAI,6CACJkO,SAAS,EACTC,OAAO,K,SC5CEC,OAxBf,WACE,IAAM7J,EAAWgD,cAoBjB,OAlBA8G,aAAW,KAAK,kBAAM9J,EAASD,SAC/B+J,aAAW,KAAK,kBAAM9J,EAASQ,SAC/BsJ,aAAW,KAAK,kBAAM9J,EAASgB,SAC/B8I,aAAW,KAAK,kBAAM9J,EAAS0B,IAAkB,OAEjDoI,aAAW,KAAK,kBACd9J,EAASiC,GAAa,CAAE7B,WAAY,EAAGC,YAAa,QAEtDyJ,aAAW,KAAK,kBACd9J,EAASiC,GAAa,CAAE7B,WAAY,EAAGC,YAAa,QAEtDyJ,aAAW,KAAK,kBACd9J,EAASiC,GAAa,CAAE7B,WAAY,EAAGC,YAAa,QAM/C,MCnBHgC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC4D,KAAM,CACJuB,QAAS,OACTc,cAAe,SACfrD,OAAQ,aAkBG4E,OAdf,WACE,IAAM3G,EAAUf,KAEhB,OACE,uBAAKqB,UAAWN,EAAQ+C,KAAxB,UACE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,QCpBS6D,eAAe,CAC5BC,QAAS,CACP9J,SAAU+J,GACVtJ,KAAMuJ,GACNlN,MAAOmN,K,mBCLI7H,GAFD8H,e,iBCQdC,IAASC,OACP,eAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,gBAAC,KAAD,CAAkBjI,MAAOA,GAAzB,UACE,eAACkI,GAAA,EAAD,IACA,eAAC,GAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.66ef439f.chunk.js","sourcesContent":["function shuffle(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nexport default function generateCards(count) {\r\n  const idsSet = new Set();\r\n  while (idsSet.size < count / 2) {\r\n    idsSet.add(Math.floor(Math.random() * 1001));\r\n  }\r\n  const ids = Array.from(idsSet).concat(Array.from(idsSet));\r\n  shuffle(ids);\r\n  const cards = ids.map((idImg) => ({\r\n    id: Math.random(),\r\n    idImg,\r\n    // src: `https://picsum.photos/id/${idImg}/300/300`,\r\n    src: `https://loremflickr.com/300/300/animal?lock=${idImg}`,\r\n    isOpen: false,\r\n  }));\r\n  return cards;\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const soundSlice = createSlice({\r\n  name: \"sound\",\r\n  initialState: {\r\n    isStart: false,\r\n    isFlipOpen: false,\r\n    isFlipClose: false,\r\n    isLike: false,\r\n    isWin: false,\r\n    isMusic: true,\r\n  },\r\n  reducers: {\r\n    playStart: (state, action) => {\r\n      state.isStart = action.payload;\r\n    },\r\n    playFlipOpen: (state, action) => {\r\n      state.isFlipOpen = action.payload;\r\n    },\r\n    playFlipClose: (state, action) => {\r\n      state.isFlipClose = action.payload;\r\n    },\r\n    playLike: (state, action) => {\r\n      state.isLike = action.payload;\r\n    },\r\n    playWin: (state, action) => {\r\n      state.isWin = action.payload;\r\n    },\r\n    playMusic: (state, action) => {\r\n      state.isMusic = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  playStart,\r\n  playFlipOpen,\r\n  playFlipClose,\r\n  playLike,\r\n  playWin,\r\n  playMusic,\r\n} = soundSlice.actions;\r\n\r\nexport const isPlay = (state) => ({\r\n  isStart: state.sound.isStart,\r\n  isFlipOpen: state.sound.isFlipOpen,\r\n  isFlipClose: state.sound.isFlipClose,\r\n  isLike: state.sound.isLike,\r\n  isWin: state.sound.isWin,\r\n});\r\nexport const isMusic = (state) => state.sound.isMusic;\r\n\r\nexport default soundSlice.reducer;\r\n","const keySettings = \"settings\";\r\nconst keyGameData = \"game_data\";\r\n\r\nexport const setSettings = (settings) => {\r\n  const data = JSON.stringify(settings);\r\n  window.localStorage.setItem(keySettings, data);\r\n};\r\n\r\nexport const getSettings = () => {\r\n  const data = window.localStorage.getItem(keySettings);\r\n  return JSON.parse(data);\r\n};\r\n\r\nexport const clearSettings = () => {\r\n  window.localStorage.removeItem(keySettings);\r\n};\r\n\r\nexport const setGameData = (gameData) => {\r\n  const data = JSON.stringify(gameData);\r\n  window.localStorage.setItem(keyGameData, data);\r\n};\r\n\r\nexport const getGameData = () => {\r\n  const data = window.localStorage.getItem(keyGameData);\r\n  return JSON.parse(data);\r\n};\r\n\r\nexport const clearGameData = () => {\r\n  window.localStorage.removeItem(keyGameData);\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport generateCards from \"../helpers/generateCards\";\r\nimport {\r\n  playStart,\r\n  playFlipOpen,\r\n  playFlipClose,\r\n  playLike,\r\n  playWin,\r\n} from \"./soundSlice\";\r\nimport { getGameData, setGameData } from \"../helpers/localStorage\";\r\n\r\nexport const gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState: getGameData() || {\r\n    cards: [],\r\n    isStartGame: false,\r\n    isShowWin: false,\r\n    timerOpenAllId: null,\r\n    flipCount: 0,\r\n    timeGame: 0,\r\n    timerGameId: null,\r\n    selectedCardId: null,\r\n    timerStartAutoId: null,\r\n    timerAutoGameId: null,\r\n  },\r\n  reducers: {\r\n    resetState: (state) => {\r\n      state.isStartGame = false;\r\n      state.flipCount = 0;\r\n      state.timeGame = 0;\r\n      state.selectedCardId = null;\r\n    },\r\n    resetCards: (state, action) => {\r\n      state.cards = generateCards(action.payload);\r\n      state.isStartGame = false;\r\n    },\r\n    openCard: (state, action) => {\r\n      state.cards[action.payload.id].isOpen = true;\r\n    },\r\n    closeCard: (state, action) => {\r\n      state.cards[action.payload].isOpen = false;\r\n    },\r\n    openAll: (state) => {\r\n      for (let card of state.cards) {\r\n        card.isOpen = true;\r\n      }\r\n    },\r\n    closeAll: (state) => {\r\n      for (let card of state.cards) {\r\n        card.isOpen = false;\r\n      }\r\n    },\r\n    setTimerOpenAllId: (state, action) => {\r\n      state.timerOpenAllId = action.payload;\r\n    },\r\n    clearTimerIdAll: (state) => {\r\n      if (state.timerOpenAllId) {\r\n        clearTimeout(state.timerOpenAllId);\r\n      }\r\n      state.timerOpenAllId = null;\r\n    },\r\n    incrementTimeGame: (state) => {\r\n      state.timeGame += 1;\r\n    },\r\n    setTimerGameId: (state, action) => {\r\n      state.isStartGame = true;\r\n      state.timerGameId = action.payload;\r\n    },\r\n    clearTimerGameId: (state) => {\r\n      clearInterval(state.timerGameId);\r\n      state.timerGameId = null;\r\n      state.isStartGame = false;\r\n    },\r\n    incrementFlipCount: (state) => {\r\n      state.flipCount += 1;\r\n    },\r\n    setSelectedCardId: (state, action) => {\r\n      state.selectedCardId = action.payload;\r\n    },\r\n    setTimerStartAutoId: (state, action) => {\r\n      state.timerStartAutoId = action.payload;\r\n    },\r\n    setTimerAutoGameId: (state, action) => {\r\n      state.timerAutoGameId = action.payload;\r\n    },\r\n    clearTimerStartAutoId: (state) => {\r\n      if (state.timerStartAutoId) {\r\n        clearTimeout(state.timerStartAutoId);\r\n        state.timerStartAutoId = null;\r\n      }\r\n    },\r\n    clearTimerAutoGameId: (state) => {\r\n      if (state.timerAutoGameId) {\r\n        clearInterval(state.timerAutoGameId);\r\n        state.timerAutoGameId = null;\r\n      }\r\n    },\r\n    setIsShowWin: (state, action) => {\r\n      state.isShowWin = action.payload;\r\n      setGameData(state);\r\n    },\r\n    saveState: (state) => {\r\n      setGameData(state);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  resetState,\r\n  resetCards,\r\n  openCard,\r\n  closeCard,\r\n  openAll,\r\n  closeAll,\r\n  setTimerOpenAllId,\r\n  clearTimerIdAll,\r\n  incrementTimeGame,\r\n  setTimerGameId,\r\n  clearTimerGameId,\r\n  incrementFlipCount,\r\n  setSelectedCardId,\r\n  setTimerStartAutoId,\r\n  setTimerAutoGameId,\r\n  clearTimerStartAutoId,\r\n  clearTimerAutoGameId,\r\n  setIsShowWin,\r\n  saveState,\r\n} = gameSlice.actions;\r\n\r\nexport const resetGame = () => (dispatch, getState) => {\r\n  const state = getState();\r\n  const countCards = state.settings.widthBoard * state.settings.heightBoard;\r\n  dispatch(clearTimerStartAutoId());\r\n  dispatch(clearTimerAutoGameId());\r\n  dispatch(clearTimerIdAll());\r\n  dispatch(clearTimerGameId());\r\n  dispatch(resetState());\r\n  dispatch(resetCards(countCards));\r\n  dispatch(saveState());\r\n};\r\n\r\nexport const flipCard = (id) => (dispatch) => {\r\n  dispatch(playFlipOpen(true));\r\n  dispatch(openCard({ id }));\r\n  dispatch(incrementFlipCount());\r\n  dispatch(compareCard(id));\r\n};\r\n\r\nexport const playGame = () => (dispatch) => {\r\n  dispatch(playStart(true));\r\n  dispatch(resetGame());\r\n  const timerGameId = setInterval(() => dispatch(incrementTimeGame()), 1000);\r\n  dispatch(setTimerGameId(timerGameId));\r\n  dispatch(openAll());\r\n  const timerId = setTimeout(() => {\r\n    dispatch(closeAll());\r\n    dispatch(setTimerOpenAllId(null));\r\n  }, 3000);\r\n  dispatch(setTimerOpenAllId(timerId));\r\n};\r\n\r\nexport const compareCard = (id) => (dispatch, getState) => {\r\n  const game = getState().game;\r\n  if (game.selectedCardId === id) return;\r\n  if (game.selectedCardId !== null) {\r\n    if (game.cards[id].idImg === game.cards[game.selectedCardId].idImg) {\r\n      dispatch(playLike(true));\r\n      if (!game.cards.filter((card) => !card.isOpen).length) {\r\n        dispatch(stopGame());\r\n      }\r\n    } else {\r\n      setTimeout(() => {\r\n        dispatch(playFlipClose(true));\r\n        dispatch(closeCard(game.selectedCardId));\r\n        dispatch(closeCard(id));\r\n        dispatch(saveState());\r\n      }, 500);\r\n    }\r\n    dispatch(setSelectedCardId(null));\r\n  } else {\r\n    dispatch(setSelectedCardId(id));\r\n  }\r\n  dispatch(saveState());\r\n};\r\n\r\nexport const stopGame = () => (dispatch) => {\r\n  dispatch(clearTimerGameId());\r\n  dispatch(clearTimerStartAutoId());\r\n  dispatch(clearTimerAutoGameId());\r\n  dispatch(setIsShowWin(true));\r\n  dispatch(playWin(true));\r\n  dispatch(saveState());\r\n};\r\n\r\nexport const autoPlay = () => (dispatch, getState) => {\r\n  dispatch(playGame());\r\n  const timerStartAutoId = setTimeout(() => {\r\n    const timerAutoGameId = setInterval(() => {\r\n      const cards = getState().game.cards;\r\n      let randomId = null;\r\n      while (randomId === null || cards[randomId]?.isOpen) {\r\n        randomId = Math.floor(Math.random() * cards.length);\r\n      }\r\n      dispatch(flipCard(randomId));\r\n    }, 2000);\r\n    dispatch(setTimerAutoGameId(timerAutoGameId));\r\n  }, 5000);\r\n  dispatch(setTimerStartAutoId(timerStartAutoId));\r\n};\r\n\r\nexport const cardsGame = (state) => state.game.cards;\r\nexport const flipCount = (state) => state.game.flipCount;\r\nexport const timeGame = (state) => state.game.timeGame;\r\nexport const isShowWin = (state) => state.game.isShowWin;\r\n\r\nexport default gameSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { resetGame } from \"./gameSlice\";\r\nimport { getSettings, setSettings } from \"../helpers/localStorage\";\r\n\r\nexport const settingsSlice = createSlice({\r\n  name: \"settings\",\r\n  initialState: getSettings() || {\r\n    isShowSettings: false,\r\n    isShowTime: true,\r\n    isShowCount: true,\r\n    widthBoard: 4,\r\n    heightBoard: 3,\r\n    isSounds: true,\r\n    volumeSounds: 1,\r\n  },\r\n  reducers: {\r\n    setIsShowSettings: (state, action) => {\r\n      state.isShowSettings = action.payload;\r\n      if (!action.payload) setSettings(state);\r\n    },\r\n    toggleShowTime: (state) => {\r\n      state.isShowTime = !state.isShowTime;\r\n    },\r\n    toggleShowCount: (state) => {\r\n      state.isShowCount = !state.isShowCount;\r\n    },\r\n    setSize: (state, action) => {\r\n      state.widthBoard = action.payload.widthBoard;\r\n      state.heightBoard = action.payload.heightBoard;\r\n    },\r\n    setIsSounds: (state, action) => {\r\n      state.isSounds = action.payload;\r\n    },\r\n    setVolumeSounds: (state, action) => {\r\n      state.volumeSounds = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setIsShowSettings,\r\n  toggleShowTime,\r\n  toggleShowCount,\r\n  setSize,\r\n  setIsSounds,\r\n  setVolumeSounds,\r\n} = settingsSlice.actions;\r\n\r\nexport const setSizeBoard = (size) => (dispatch) => {\r\n  dispatch(setSize(size));\r\n  dispatch(resetGame());\r\n};\r\n\r\nexport const isShowSettings = (state) => state.settings.isShowSettings;\r\nexport const isShow = (state) => ({\r\n  isShowTime: state.settings.isShowTime,\r\n  isShowCount: state.settings.isShowCount,\r\n});\r\nexport const sizeBoard = (state) => ({\r\n  widthBoard: state.settings.widthBoard,\r\n  heightBoard: state.settings.heightBoard,\r\n});\r\nexport const sounds = (state) => ({\r\n  isSounds: state.settings.isSounds,\r\n  volumeSounds: state.settings.volumeSounds,\r\n});\r\nexport const isSounds = (state) => state.settings.isSounds;\r\nexport const volumeSounds = (state) => state.settings.isSounds;\r\n\r\nexport default settingsSlice.reducer;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Timer from \"@material-ui/icons/Timer\";\r\nimport ViewCarousel from \"@material-ui/icons/ViewCarousel\";\r\nimport { setIsShowSettings, isShow } from \"../redux/settingsSlice\";\r\nimport { flipCount, timeGame } from \"../redux/gameSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  icon: {\r\n    marginRight: theme.spacing(1),\r\n    marginLeft: theme.spacing(5),\r\n  },\r\n}));\r\n\r\nfunction TopBar() {\r\n  const dispatch = useDispatch();\r\n  const { isShowTime, isShowCount } = useSelector(isShow);\r\n  const countFlip = useSelector(flipCount);\r\n  const time = useSelector(timeGame);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n          // onClick={toggleSideBar(true)}\r\n          onClick={() => dispatch(setIsShowSettings(true))}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          Flip and remember\r\n        </Typography>\r\n\r\n        {isShowCount && (\r\n          <>\r\n            <ViewCarousel className={classes.icon} />\r\n            <Typography variant=\"h6\">{countFlip}</Typography>\r\n          </>\r\n        )}\r\n\r\n        {isShowTime && (\r\n          <>\r\n            <Timer className={classes.icon} />\r\n            <Typography variant=\"h6\">{time} sec</Typography>\r\n          </>\r\n        )}\r\n\r\n        {/* <Button color=\"inherit\">Login</Button> */}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default TopBar;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport VolumeDown from \"@material-ui/icons/VolumeDown\";\r\nimport VolumeUp from \"@material-ui/icons/VolumeUp\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  toggleShowTime,\r\n  toggleShowCount,\r\n  setSizeBoard,\r\n  setIsSounds,\r\n  setVolumeSounds,\r\n  isShow,\r\n  sizeBoard,\r\n  sounds,\r\n} from \"../redux/settingsSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  group: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction Settings() {\r\n  const dispatch = useDispatch();\r\n  const { isShowTime, isShowCount } = useSelector(isShow);\r\n  const { widthBoard, heightBoard } = useSelector(sizeBoard);\r\n  const { isSounds, volumeSounds } = useSelector(sounds);\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleSize = (event) => {\r\n    const [width, height] = event.target.value.split(\"x\");\r\n    dispatch(setSizeBoard({ widthBoard: +width, heightBoard: +height }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">UI Settngs</FormLabel>\r\n        <FormGroup className={classes.group}>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={isShowCount}\r\n                onChange={() => dispatch(toggleShowCount())}\r\n                name=\"count\"\r\n              />\r\n            }\r\n            label=\"Show flip count\"\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={isShowTime}\r\n                onChange={() => dispatch(toggleShowTime())}\r\n                name=\"time\"\r\n              />\r\n            }\r\n            label=\"Show time game\"\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormLabel component=\"legend\">Size board</FormLabel>\r\n        <FormGroup className={classes.group}>\r\n          <RadioGroup\r\n            aria-label=\"size board\"\r\n            // value={size}\r\n            value={`${widthBoard}x${heightBoard}`}\r\n            onChange={handleSize}\r\n          >\r\n            <FormControlLabel\r\n              value=\"3x2\"\r\n              control={<Radio />}\r\n              label=\"3x2 (easy)\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"4x3\"\r\n              control={<Radio />}\r\n              label=\"4x3 (medium)\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"6x4\"\r\n              control={<Radio />}\r\n              label=\"6x4 (hard)\"\r\n            />\r\n            {/* <FormControlLabel\r\n              value=\"12x8\"\r\n              control={<Radio />}\r\n              label=\"12x8 (very hard)\"\r\n            /> */}\r\n          </RadioGroup>\r\n        </FormGroup>\r\n\r\n        <FormLabel component=\"legend\">Sounds</FormLabel>\r\n        <FormGroup className={classes.group}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={isSounds}\r\n                onChange={(e) => dispatch(setIsSounds(e.target.checked))}\r\n                name=\"sounds\"\r\n              />\r\n            }\r\n            label=\"Use sounds\"\r\n          />\r\n          <Typography id=\"continuous-slider\" gutterBottom>\r\n            Volume sounds\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item>\r\n              <VolumeDown />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Slider\r\n                value={volumeSounds}\r\n                onChange={(e, val) => dispatch(setVolumeSounds(val))}\r\n                disabled={!isSounds}\r\n                min={0}\r\n                max={1}\r\n                step={0.1}\r\n                aria-labelledby=\"continuous-slider\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <VolumeUp />\r\n            </Grid>\r\n          </Grid>\r\n        </FormGroup>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Settings from \"./Settings\";\r\nimport { setIsShowSettings, isShowSettings } from \"../redux/settingsSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 250,\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction SideBar() {\r\n  const dispatch = useDispatch();\r\n\r\n  const isOpen = useSelector(isShowSettings);\r\n\r\n  const classes = useStyles();\r\n\r\n  const toggleSideBar = (open = true) => (event) => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    dispatch(setIsShowSettings(open));\r\n  };\r\n\r\n  return (\r\n    <Drawer anchor=\"left\" open={isOpen} onClose={toggleSideBar(false)}>\r\n      <div\r\n        className={classes.root}\r\n        role=\"presentation\"\r\n        // onClick={toggleSideBar(false)}\r\n        // onKeyDown={toggleSideBar(false)}\r\n      >\r\n        <Settings />\r\n      </div>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {},\r\n  media: {\r\n    aspectRatio: \"1 / 1\",\r\n  },\r\n}));\r\n\r\nfunction FlipCard({\r\n  id = \"\",\r\n  src = \"\",\r\n  isOpen = false,\r\n  onClick,\r\n  className = \"\",\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const handlerClick = () => {\r\n    if (!isOpen) onClick(id);\r\n  };\r\n  return (\r\n    <div className={className}>\r\n      <ReactCardFlip isFlipped={isOpen} flipDirection=\"horizontal\">\r\n        <Card className={classes.card}>\r\n          <CardActionArea onClick={handlerClick}>\r\n            <CardMedia\r\n              className={classes.media}\r\n              image=\"https://picsum.photos/id/10/300/300\"\r\n              title=\"Flip Card\"\r\n            />\r\n          </CardActionArea>\r\n        </Card>\r\n\r\n        <Card className={classes.card}>\r\n          <CardActionArea onClick={handlerClick}>\r\n            <CardMedia\r\n              className={classes.media}\r\n              image={src}\r\n              title=\"Flip Card\"\r\n            />\r\n          </CardActionArea>\r\n        </Card>\r\n      </ReactCardFlip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FlipCard;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FlipCard from \"./FlipCard\";\r\nimport { sizeBoard } from \"../redux/settingsSlice\";\r\nimport { resetGame, flipCard, cardsGame } from \"../redux/gameSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  card: {},\r\n}));\r\n\r\nfunction GameBoard() {\r\n  const dispatch = useDispatch();\r\n  const { widthBoard } = useSelector(sizeBoard);\r\n  const cards = useSelector(cardsGame);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (!cards.length) dispatch(resetGame());\r\n  }, []);\r\n\r\n  const handlerClick = (id) => {\r\n    dispatch(flipCard(id));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={12 / widthBoard - 1}>\r\n        {cards.map((card, id) => (\r\n          <Grid item xs={12 / widthBoard} key={card.id}>\r\n            <FlipCard\r\n              className={classes.card}\r\n              id={id}\r\n              src={card.src}\r\n              isOpen={card.isOpen}\r\n              onClick={handlerClick}\r\n            />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Replay from \"@material-ui/icons/Replay\";\r\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\r\nimport Autorenew from \"@material-ui/icons/Autorenew\";\r\nimport { resetGame, playGame, autoPlay } from \"../redux/gameSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n  },\r\n}));\r\n\r\nfunction ControlBoard() {\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        startIcon={<Replay />}\r\n        onClick={() => dispatch(resetGame())}\r\n      >\r\n        Reset\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        startIcon={<PlayArrow />}\r\n        onClick={() => dispatch(playGame())}\r\n      >\r\n        Play\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        startIcon={<Autorenew />}\r\n        onClick={() => dispatch(autoPlay())}\r\n      >\r\n        Auto\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlBoard;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {\r\n  setIsShowWin,\r\n  isShowWin,\r\n  flipCount,\r\n  timeGame,\r\n} from \"../redux/gameSlice\";\r\n\r\nfunction WinnerCard() {\r\n  const dispatch = useDispatch();\r\n  const isShow = useSelector(isShowWin);\r\n  const time = useSelector(timeGame);\r\n  const count = useSelector(flipCount);\r\n\r\n  const handleClose = () => {\r\n    dispatch(setIsShowWin(false));\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={isShow}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{\"You win!\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          <div>Time Game: {time} sec</div>\r\n          <div>Flip Count: {count}</div>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n          Ok\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default WinnerCard;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport ControlBoard from \"./ControlBoard\";\r\nimport WinnerCard from \"./WinnerCard\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MainBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container className={classes.root} maxWidth=\"sm\">\r\n      <GameBoard />\r\n      <ControlBoard />\r\n      <WinnerCard />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MainBar;\r\n","export default __webpack_public_path__ + \"static/media/start.fdf26345.mp3\";","export default __webpack_public_path__ + \"static/media/flipOpen.4f64a62d.mp3\";","export default __webpack_public_path__ + \"static/media/flipClose.8892fcc9.mp3\";","export default __webpack_public_path__ + \"static/media/like.db26c168.mp3\";","export default __webpack_public_path__ + \"static/media/win.80e8724b.mp3\";","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ReactHowler from \"react-howler\";\r\nimport useSound from \"use-sound\";\r\nimport {\r\n  playStart,\r\n  playFlipOpen,\r\n  playFlipClose,\r\n  playLike,\r\n  playWin,\r\n  isPlay,\r\n  isMusic,\r\n} from \"../redux/soundSlice\";\r\nimport { sounds } from \"../redux/settingsSlice\";\r\nimport startSfx from \"../sounds/start.mp3\";\r\nimport flipOpenSfx from \"../sounds/flipOpen.mp3\";\r\nimport flipCloseSfx from \"../sounds/flipClose.mp3\";\r\nimport likeSfx from \"../sounds/like.mp3\";\r\nimport winSfx from \"../sounds/win.mp3\";\r\n\r\nfunction Sounds() {\r\n  const dispatch = useDispatch();\r\n  const play = useSelector(isPlay);\r\n  const isMus = useSelector(isMusic);\r\n  const { isSounds, volumeSounds } = useSelector(sounds);\r\n\r\n  const [start] = useSound(startSfx, {\r\n    volume: volumeSounds,\r\n    soundEnabled: isSounds,\r\n  });\r\n  const [flipOpen] = useSound(flipOpenSfx, {\r\n    volume: volumeSounds,\r\n    soundEnabled: isSounds,\r\n  });\r\n  const [flipClose] = useSound(flipCloseSfx, {\r\n    volume: volumeSounds,\r\n    soundEnabled: isSounds,\r\n  });\r\n  const [like] = useSound(likeSfx, {\r\n    volume: volumeSounds,\r\n    soundEnabled: isSounds,\r\n  });\r\n  const [win] = useSound(winSfx, {\r\n    volume: volumeSounds,\r\n    soundEnabled: isSounds,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (play.isStart) {\r\n      start();\r\n      dispatch(playStart(false));\r\n    }\r\n    if (play.isFlipOpen) {\r\n      flipOpen();\r\n      dispatch(playFlipOpen(false));\r\n    }\r\n    if (play.isFlipClose) {\r\n      flipClose();\r\n      dispatch(playFlipClose(false));\r\n    }\r\n    if (play.isLike) {\r\n      like();\r\n      dispatch(playLike(false));\r\n    }\r\n    if (play.isWin) {\r\n      win();\r\n      dispatch(playWin(false));\r\n    }\r\n  }, [play]);\r\n\r\n  return (\r\n    <ReactHowler\r\n      src=\"http://nashe1.hostingradio.ru/rock-128.mp3\"\r\n      playing={false}\r\n      html5={true}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Sounds;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHotkeys } from \"react-hotkeys-hook\";\r\nimport { resetGame, playGame, autoPlay } from \"../redux/gameSlice\";\r\nimport { setSizeBoard, setIsShowSettings } from \"../redux/settingsSlice\";\r\n\r\nfunction HotKey() {\r\n  const dispatch = useDispatch();\r\n\r\n  useHotkeys(\"r\", () => dispatch(resetGame()));\r\n  useHotkeys(\"p\", () => dispatch(playGame()));\r\n  useHotkeys(\"a\", () => dispatch(autoPlay()));\r\n  useHotkeys(\"m\", () => dispatch(setIsShowSettings(true)));\r\n\r\n  useHotkeys(\"1\", () =>\r\n    dispatch(setSizeBoard({ widthBoard: 3, heightBoard: 2 }))\r\n  );\r\n  useHotkeys(\"2\", () =>\r\n    dispatch(setSizeBoard({ widthBoard: 4, heightBoard: 3 }))\r\n  );\r\n  useHotkeys(\"3\", () =>\r\n    dispatch(setSizeBoard({ widthBoard: 6, heightBoard: 4 }))\r\n  );\r\n  //   useHotkeys(\"4\", () =>\r\n  //     dispatch(setSizeBoard({ widthBoard: 12, heightBoard: 8 }))\r\n  //   );\r\n\r\n  return null;\r\n}\r\n\r\nexport default HotKey;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TopBar from \"./TopBar\";\r\nimport SideBar from \"./SideBar\";\r\nimport MainBar from \"./MainBar\";\r\nimport Sounds from \"./Sounds\";\r\nimport HotKey from \"./HotKey\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TopBar />\r\n      <SideBar />\r\n      <MainBar />\r\n      <Sounds />\r\n      <HotKey />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport settingsReducer from \"./settingsSlice\";\r\nimport gameReducer from \"./gameSlice\";\r\nimport soundReducer from \"./soundSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    settings: settingsReducer,\r\n    game: gameReducer,\r\n    sound: soundReducer,\r\n  },\r\n});\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme();\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport theme from \"./Theme/theme\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport \"fontsource-roboto\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <MuiThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}